trigger:
  batch: true  #when a pipeline is running, the system waits until the run is completed, then starts another run with all changes
  branches:
    include:
    - 'main'
  paths:
   exclude:
     -  '*'
resources:
- repo: self

pool: ITEA
#  vmImage: 'ubuntu-latest'

variables:
  app: 'app'
  BRANCH: 'itea'
  poolvar: ITEA
  ACRvar: 'ksidopsaks'
  imagerRepo: '$(BRANCH)-$(app)'
  tag: '$(Build.BuildId)'
  NameSpaceDeploy: 'develop'
  URKACR: '$(ACRvar).azurecr.io'
  ACRurlVar: "$(ACRvar).azurecr.io/$(imagerRepo)"
############ VAL ENV ############################################
  VAL_SPRING_PROFILES_ACTIVE: 'val-1'
  VAL_ELG_LOADFIXTURE: 'false'
  VAL_ELG_CLEANMIGRATIONS: 'false'
############ AKS creds ##########################################
  AZdOpsSubs: "$(SUBvariable)"
  AKSclusterName: 'aks-itea' 
  PAT: "$(PATvariable)"
  AZD_URL: 'https://dev.azure.com/itea-ksi'
  AZD_P: 'itea'
  VGID: '1'
#  AKSRG: 'dOPS_storage'
#########  GIT ##################################################
  GitBranch: 'master'
  GitLink: 'git@github.com:sergharkov/itea.git'
  GitUserName: 'Azure_DevOps_Pipeline'
  GitUserMAil: 'ksi@ksi.kiev.ua'  
########  Manifests  ############################################
  PublicManifest: 'DeployManifest'
  OnGITmanifests: '$(Build.SourcesDirectory)/infrastructure/manifests/'
  DeployAppYML: '$(Pipeline.Workspace)/$(PublicManifest)/app.yml'
  DeployServiceYML: '$(Pipeline.Workspace)/$(PublicManifest)/svc.yml'
  URLconteiner: '$(URKACR)/$(imagerRepo):$(Build.BuildNumber)'
########  Manifests  ############################################  
#  VarFileVersion: '$(Build.SourcesDirectory)/azureDevops-CI/UnTriger/CI-Version.txt'
  
stages:
##################################################
- stage: BuildUIimage
  variables:
  - group: buildsENV
  displayName: Build UI image
  jobs:
  - job: BuildUI
    displayName: BuildUI
    pool: $(poolvar)
    steps:
    - task: DownloadSecureFile@1
      enabled: false
      displayName: Add Secure File SSH KEY
      inputs:
        secureFile: 'id_ed25519-CentOSksiProd'
    - task: DownloadSecureFile@1
      enabled: false
      displayName: Add Secure File  PUB
      inputs:
        secureFile: 'id_ed25519.pub-CentOSksiProd'       
    - task: Bash@3
      displayName: IncrementVar
      name: IncrementVar
      inputs:
        targetType: 'inline'
        script: |
          echo "-------------------------------------------------------"
          echo "ACRurlVar                           >>>>   $(ACRurlVar)"
          echo "imagerRepo                          >>>>   $(imagerRepo)"
          echo "--------------------Libs Var Groups -----------------------------------"
          echo "app_build_number     >$(app_build_number) " 
          echo "major_number         >$(major_number)"
          echo "PAT------------------>$(PAT)"
          echo '#########################add public key ##########################'
          ls -l $(Agent.TempDirectory)
          #mkdir -p ~/.ssh
          #touch ~/.ssh/known_hosts
          #ssh-keyscan github.com >> ~/.ssh/known_hosts
          #cp -f $(Agent.TempDirectory)/id_ed25519-CentOSksiProd ~/.ssh/id_ed25519
          #cp -f $(Agent.TempDirectory)/id_ed25519.pub-CentOSksiProd ~/.ssh/id_ed25519.pub
          #chmod =600 ~/.ssh/id_ed25519

          echo -e '\n########################## get build number ###############################'
          BuildNumber=$(($(echo $(app_build_number)) + 1))  ###############################################
          echo "BuildNumber       "$BuildNumber
          echo "VarFileVersion    "$(VarFileVersion)
          DargVersionLocal="$(major_number).$BuildNumber.$(BRANCH)"
          echo "DargVersionLocal         >>$DargVersionLocal"
          echo -e "\n######################## update build number ##############################"
          cat $(Build.SourcesDirectory)/Dockerfile
          az extension add --name azure-devops
          echo  $PAT | az devops login --organization $AZD_URL
          az account set --subscription $AZdOpsSubs
          az devops configure -d organization=$AZD_URL project=$AZD_P
          az pipelines variable-group list \
            --group-name buildsENV \
            --top 30
            
          az pipelines variable-group variable update \
            --id $VGID \
            --name app_build_number \
            --value $BuildNumber

          az pipelines variable-group list \
            --group-name buildsENV \
            --top 30
          echo -e "\n###########################################################################"
          ####change global variables##################
          echo "##vso[build.updatebuildnumber]$DargVersionLocal"
    - task: Bash@3
      displayName: Git Push increment
      enabled: false
      inputs:
        targetType: 'inline'
        script: |
          echo "######################## git push ################################"
          git add $(VarFileVersion)
          git commit -m "change file version.txt add Version $(Build.BuildNumber)"
          git status
          echo "++++++"$(GitBranch)
          git push origin $(GitBranch)

    - task: Docker@2
      displayName: Docker login
      inputs:
        containerRegistry: $(ACRvar)
        command: 'login'

    - task: Docker@2
      displayName: Build and Push an image
      enabled: true
      inputs:
        containerRegistry: $(ACRvar)
        repository: '$(imagerRepo)'
        command: 'buildAndPush'
        Dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
        tags: |
          $(Build.BuildNumber)
          latest

    - task: PublishBuildArtifacts@1
      displayName: PUblish Manifest
      inputs:
        PathtoPublish: '$(OnGITmanifests)'
        ArtifactName: $(PublicManifest)
        publishLocation: 'Container'
#===================================================================================================
#===================================  Stage Deploy  UI to AKS ======================================
#===================================================================================================
- stage: DeployUI
  displayName: Deploy UI RADIS to AKS
  dependsOn: BuildUIimage
  variables:
    acrsecret: k8sexamplesacrauth
  jobs:
  - job: DeployUI
    displayName: Deploy to AKS
    pool: $(poolvar)
    steps:

    - task: Bash@3
      displayName: ShowVars
      name: ShowVars
      inputs:
        targetType: 'inline'
        script: |
          echo "-------------------------------------------------------"
          echo "SOURCE_COMMIT           --> "$(SOURCE_COMMIT)
          echo "URLconteiner            --> "$(URLconteiner)
          echo "build build number      --> "$(build.buildnumber)

    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: '$(PublicManifest)'
        targetPath: '$(Pipeline.Workspace)/$(PublicManifest)'
    - task: KubernetesManifest@0
      enabled: true
      inputs:
        action: 'createSecret'
        kubernetesServiceConnection: '$(AKSclusterName)-$(NameSpaceDeploy)'
        namespace: '$(NameSpaceDeploy)'
        secretType: 'dockerRegistry'
        secretName: '$(acrsecret)'
        dockerRegistryEndpoint: $(ACRvar)

    - task: Bash@3
      displayName: ShowVarsANDreplace
      enabled: true
      name: ShowVars2
      inputs:
        targetType: 'inline'
        script: |
          echo "-------------------------------------------------------"
          echo "URLconteiner            -->  $(URLconteiner)"
          echo "build build number      --> "$(build.buildnumber)
          $echo "VarFileVersion          --> "$(VarFileVersion)
          echo "DeployAppYML            --> "$(DeployAppYML)
          echo "--------------------cat services manifest-----------------------------------"
          cat $(DeployServiceYML)
          echo "--------------------replase build number in file----------------------------"
          cat $(DeployAppYML)
          sed -i "s/BUILDnumberVAR/$(Build.BuildNumber)/g" $(DeployAppYML)
          echo "---------------------replase URL ACR in file--------------------------------"
          sed -i "s#{{URLconteiner}}#$(URLconteiner)#g" $(DeployAppYML)
          echo "------------------------cat file DeployAppYML--------------------------------------------"
          cat $(DeployAppYML)
          echo "--------------------cat file----------------------------"
    - task: KubernetesManifest@0
      displayName: Deploy matifests AKS
      inputs:
        action: 'deploy'
        kubernetesServiceConnection: '$(AKSclusterName)-$(NameSpaceDeploy)'
        namespace: '$(NameSpaceDeploy)'
        manifests: |
          $(DeployAppYML)
          $(DeployServiceYML)
          
    - task: Bash@3
      displayName: ShowVars
      name: ShowVars
      inputs:
        targetType: 'inline'
        script: |
          echo "-------------------------------------------------------"
          docker image ls
          docker image rm $(docker image ls -q) -f   clear all images
          docker image ls
          docker system df
